{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"기말프로젝트_빅데이터애널리틱스","provenance":[{"file_id":"1MOneWY7erXHf-rK9hjGxrMYV_Y6YUdwW","timestamp":1653276276437}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 패키지 로드"],"metadata":{"id":"COk7WUun70tI"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2cqYL2bZ6BmA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654762823040,"user_tz":-540,"elapsed":16262,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"112a5e2d-5d48-4963-b0a6-a3f982069814"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting catboost\n","  Downloading catboost-1.0.6-cp37-none-manylinux1_x86_64.whl (76.6 MB)\n","\u001b[K     |████████████████████████████████| 76.6 MB 1.2 MB/s \n","\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.7/dist-packages (from catboost) (0.10.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.21.6)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from catboost) (1.3.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from catboost) (1.15.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from catboost) (1.4.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from catboost) (3.2.2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from catboost) (5.5.0)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->catboost) (2022.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (1.4.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->catboost) (3.0.9)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->catboost) (4.2.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from plotly->catboost) (8.0.1)\n","Installing collected packages: catboost\n","Successfully installed catboost-1.0.6\n"]}],"source":["!pip install catboost"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split, GroupShuffleSplit, GridSearchCV\n","from sklearn.model_selection import KFold, StratifiedKFold, cross_val_score, cross_validate\n","from sklearn.metrics import accuracy_score, precision_score\n","from sklearn.metrics import recall_score, roc_auc_score, f1_score\n","from sklearn.metrics import precision_recall_curve, roc_curve\n","from sklearn.feature_selection import VarianceThreshold, RFE\n","from sklearn.feature_selection import SelectKBest\n","from sklearn.feature_selection import f_classif, f_regression\n","from lightgbm import LGBMClassifier\n","from xgboost import XGBClassifier\n","from catboost import CatBoostClassifier\n","from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import ExtraTreesClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.ensemble import IsolationForest\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.naive_bayes import GaussianNB, BernoulliNB, MultinomialNB\n","from imblearn.over_sampling import SMOTE, BorderlineSMOTE, ADASYN\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","from sklearn.decomposition import PCA\n","from sklearn.impute import KNNImputer\n","from sklearn.base import clone\n","from queue import Queue\n","import threading\n","import time\n","import random\n","import math"],"metadata":{"id":"FtZK5jwG7utB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 패키지 버전 확인"],"metadata":{"id":"0iskrhn677Wl"}},{"cell_type":"code","source":["import os\n","import sklearn\n","import lightgbm\n","import xgboost\n","import imblearn\n","import catboost\n","\n","print(\"cores:\", os.cpu_count())\n","print(\"sklearn:\", sklearn.__version__)\n","print(\"lightgbm:\", lightgbm.__version__)\n","print(\"xgboost:\", xgboost.__version__)\n","print(\"catboost:\", catboost.__version__)\n","print(\"imblearn:\", imblearn.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UjVhHBeH7wvA","executionInfo":{"status":"ok","timestamp":1654763215503,"user_tz":-540,"elapsed":302,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"50f5e395-9aaf-403e-ddef-522f267608c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cores: 2\n","sklearn: 1.0.2\n","lightgbm: 2.2.3\n","xgboost: 0.90\n","catboost: 1.0.6\n","imblearn: 0.8.1\n"]}]},{"cell_type":"markdown","source":["# 데이터 불러오기"],"metadata":{"id":"Au_xMsGe6H5B"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s--XuOajbXra","executionInfo":{"status":"ok","timestamp":1654763244894,"user_tz":-540,"elapsed":25192,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"fdda371e-48d5-4009-f0cb-41feecc8dc7e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# 랜덤 시드 고정\n","RANDOM_SEED = 777\n","np.random.seed(RANDOM_SEED)\n","\n","# 데이터 불러오기\n","data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/secom.data\", sep=\" \", header=None)\n","labels = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/secom_labels.data\", sep=\" \", header=None)\n","\n","# x, y 분할\n","x = data\n","y = labels.iloc[:, 0]\n","\n","# 컬럼 타입 문자열로 설정\n","x.columns = x.columns.astype(str)\n","\n","# 정상 데이터 값 변환 -1 -> 0\n","y.replace({-1: 0}, inplace=True)\n","\n","fail_count = y[y == 1].shape[0]\n","print(f\"학습 데이터 크기: {x.shape}\")\n","print(f\"불량 데이터 수: {fail_count}({round(fail_count / x.shape[0] * 100, 2)}%)\")"],"metadata":{"id":"O8mW2TlH8BTX","executionInfo":{"status":"ok","timestamp":1654763251831,"user_tz":-540,"elapsed":1440,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"59db9052-0f81-43c6-c034-0dfb0b4e49bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["학습 데이터 크기: (1567, 590)\n","불량 데이터 수: 104(6.64%)\n"]}]},{"cell_type":"markdown","source":["# 전처리 함수 등록"],"metadata":{"id":"693cbIir77UL"}},{"cell_type":"code","source":["def preprocessing(x_train, x_test, y_train, y_test):\n","  x_train = x_train.copy()\n","  x_test = x_test.copy()\n","  y_train = y_train.copy()\n","  y_test = y_test.copy()\n","\n","  print(f\"학습 데이터 크기: {x_train.shape}\")\n","  print(f\"검증 데이터 크기: {x_test.shape}\")\n","\n","  # 결측치 포함 열 단순제거\n","  # x_train.dropna(axis=1)\n","  # x_test.dropna(axis=1)\n","\n","  # 결측치 갯수를 피처에 추가 ==========\n","  #x_train['nulls'] = x_train.isnull().sum(axis=1)\n","  #x_test['nulls'] = x_test.isnull().sum(axis=1)\n","\n","  #1. 결측률이 높은것은 삭제\n","  def percentna(dataframe, threshold):\n","    columns = dataframe.columns[(dataframe.isna().sum()/dataframe.shape[1])>threshold]\n","    return columns.tolist()\n","  \n","  na_columns = percentna(x_train, 0.5)\n","  x_train = x_train.drop(na_columns, axis=1)\n","  x_test = x_test.drop(na_columns, axis=1)\n","  n_features1 = x_train.shape[1]\n","  print(\"결측률 50% 이상 변수 제거 후 학습데이터 크기:\", x_train.shape)\n","\n","  #3. KNN 결측치 대치\n","  imputer = KNNImputer(n_neighbors=5)\n","  x_train = pd.DataFrame(imputer.fit_transform(x_train), columns=x_train.columns, index=x_train.index)\n","  x_test = pd.DataFrame(imputer.fit_transform(x_test), columns=x_test.columns, index=x_test.index)\n","  print(\"KNN 결측치 대치 완료\")\n","\n","  #8. 저분산 피처 제거\n","  selector = VarianceThreshold()\n","  selector.fit(x_train)\n","  x_train = x_train.loc[:, selector.get_support()]\n","  x_test = x_test.loc[:, selector.get_support()]\n","  print(\"저분산 피처 제거 후 학습 데이터 크기:\", x_train.shape)\n","\n","  #4. 다중공선성 제거\n","  def correlation(dataset, threshold):\n","    col_corr = set()  # Set of all the names of correlated columns\n","    corr_matrix = dataset.corr()\n","    for i in range(len(corr_matrix.columns)):\n","        for j in range(i):\n","            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n","                colname = corr_matrix.columns[i]  # getting the name of column\n","                col_corr.add(colname)\n","    return col_corr\n","\n","  corr_features = correlation(x_train, 0.95)\n","  x_train = x_train.drop(corr_features, axis=1)\n","  x_test = x_test.drop(corr_features, axis=1)\n","  n_features3 = x_train.shape[1]\n","  print(\"다중공선성 변수 제거 후 학습 데이터 크기:\",x_train.shape)\n","\n","  #5. target 변수와 의미없는거 제거\n","  def corrwith_target(dataframe, target, threshold):\n","    cor = dataframe.corr()\n","    #Correlation with output variable\n","    cor_target = abs(cor[target])\n","    #Selecting non correlated features\n","    relevant_features = cor_target[cor_target<threshold]\n","    return relevant_features.index.tolist()[:-1]\n","  \n","  dummy_train = x_train.copy()\n","  dummy_train['target'] = y_train\n","\n","  corrwith_cols = corrwith_target(dummy_train, 'target', 0.05) #적절한 임계값은 주관적인것 같다\n","  x_train = x_train.drop(corrwith_cols, axis=1)\n","  x_test = x_test.drop(corrwith_cols, axis=1)\n","  n_features4 = x_train.shape[1]\n","  print(\"타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기:\", x_train.shape)\n","\n","  #6. 스케일링\n","  from sklearn.preprocessing import StandardScaler\n","\n","  std_scaler = StandardScaler()\n","  std_scaler.fit(x_train)\n","\n","  x_train = std_scaler.transform(x_train)\n","  x_test = std_scaler.transform(x_test)\n","\n","  print(\"스케일링 완료\")\n","\n","  #7. BorderlineSMOTE 오버샘플링\n","  #bsm = BorderlineSMOTE(random_state=RANDOM_SEED, k_neighbors=10, m_neighbors=20) # sampling_strategy='float'\n","  #x_train, y_train = bsm.fit_resample(x_train.astype(float), y_train.astype(float))\n","  #print(\"BorderlineSMOTE 오버샘플링 후 학습 데이터 크기:\", x_train.shape)\n","\n","  #7. ADASYN 오버샘플링 (가중치를 둬서 SMOTE 진행)\n","  ada = ADASYN(random_state=RANDOM_SEED)\n","  x_train, y_train = ada.fit_resample(x_train.astype(float), y_train.astype(float))\n","  print(\"ADASYN 오버샘플링 후 학습 데이터 크기:\", x_train.shape)\n","\n","  #9. SelectKBest 피처 선택 ==========\n","  #selector = SelectKBest(score_func=f_classif, k=300)\n","  #selector.fit(x_train, y_train)\n","  #x_train = x_train.loc[:, selector.get_support()]\n","  #x_test = x_test.loc[:, selector.get_support()]\n","  #print(\"SelectKBest 피처 선택 후 학습 데이터 크기:\", x_train.shape)\n","\n","  return x_train, x_test, y_train, y_test\n"],"metadata":{"id":"Vpze9_G774BR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# K-Fold 데이터셋 생성 (전처리 적용)"],"metadata":{"id":"-WSIuzsv-KQr"}},{"cell_type":"code","source":["N_SPLITS = 5\n","kfold_data = []\n","\n","def make_kfold_data():\n","  fold_counter = 1\n","  skf = StratifiedKFold(n_splits=N_SPLITS, random_state=RANDOM_SEED, shuffle=True)\n","  for train_index, test_index in skf.split(x, y):\n","    x_train, x_test = x.iloc[train_index], x.iloc[test_index]\n","    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n","    \n","    #  전처리 적용\n","    print(f\"========== {fold_counter} ==========\")\n","    x_train, x_test, y_train, y_test = preprocessing(x_train, x_test, y_train, y_test)\n","    print()\n","    \n","    kfold_data.append([x_train, x_test, y_train, y_test, fold_counter])\n","\n","    fold_counter += 1\n","\n","make_kfold_data()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TUQj9QNMq2dJ","executionInfo":{"status":"ok","timestamp":1654253061273,"user_tz":-540,"elapsed":32890,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"e5e472c3-53e6-4f7d-90c9-8c70f5dcc0eb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== 1 ==========\n","학습 데이터 크기: (1253, 590)\n","검증 데이터 크기: (314, 590)\n","결측률 50% 이상 변수 제거 후 학습데이터 크기: (1253, 558)\n","KNN 결측치 대치 완료\n","저분산 피처 제거 후 학습 데이터 크기: (1253, 442)\n","다중공선성 변수 제거 후 학습 데이터 크기: (1253, 264)\n","타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기: (1253, 48)\n","스케일링 완료\n","ADASYN 오버샘플링 후 학습 데이터 크기: (2342, 48)\n","\n","========== 2 ==========\n","학습 데이터 크기: (1253, 590)\n","검증 데이터 크기: (314, 590)\n","결측률 50% 이상 변수 제거 후 학습데이터 크기: (1253, 558)\n","KNN 결측치 대치 완료\n","저분산 피처 제거 후 학습 데이터 크기: (1253, 436)\n","다중공선성 변수 제거 후 학습 데이터 크기: (1253, 269)\n","타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기: (1253, 67)\n","스케일링 완료\n","ADASYN 오버샘플링 후 학습 데이터 크기: (2339, 67)\n","\n","========== 3 ==========\n","학습 데이터 크기: (1254, 590)\n","검증 데이터 크기: (313, 590)\n","결측률 50% 이상 변수 제거 후 학습데이터 크기: (1254, 558)\n","KNN 결측치 대치 완료\n","저분산 피처 제거 후 학습 데이터 크기: (1254, 442)\n","다중공선성 변수 제거 후 학습 데이터 크기: (1254, 270)\n","타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기: (1254, 78)\n","스케일링 완료\n","ADASYN 오버샘플링 후 학습 데이터 크기: (2349, 78)\n","\n","========== 4 ==========\n","학습 데이터 크기: (1254, 590)\n","검증 데이터 크기: (313, 590)\n","결측률 50% 이상 변수 제거 후 학습데이터 크기: (1254, 558)\n","KNN 결측치 대치 완료\n","저분산 피처 제거 후 학습 데이터 크기: (1254, 442)\n","다중공선성 변수 제거 후 학습 데이터 크기: (1254, 268)\n","타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기: (1254, 66)\n","스케일링 완료\n","ADASYN 오버샘플링 후 학습 데이터 크기: (2334, 66)\n","\n","========== 5 ==========\n","학습 데이터 크기: (1254, 590)\n","검증 데이터 크기: (313, 590)\n","결측률 50% 이상 변수 제거 후 학습데이터 크기: (1254, 558)\n","KNN 결측치 대치 완료\n","저분산 피처 제거 후 학습 데이터 크기: (1254, 442)\n","다중공선성 변수 제거 후 학습 데이터 크기: (1254, 268)\n","타켓변수와 연관성이 떨어지는 변수 제거 후 학습 데이터 크기: (1254, 61)\n","스케일링 완료\n","ADASYN 오버샘플링 후 학습 데이터 크기: (2352, 61)\n","\n"]}]},{"cell_type":"markdown","source":["# 모델 선언"],"metadata":{"id":"AiUcl9Bm-Hlw"}},{"cell_type":"code","source":["models = [\n","  XGBClassifier(random_state=RANDOM_SEED),\n","  CatBoostClassifier(random_state=RANDOM_SEED, silent=True),\n","  LGBMClassifier(random_state=RANDOM_SEED), # use_missing=False\n","  RandomForestClassifier(random_state=RANDOM_SEED),\n","  DecisionTreeClassifier(random_state=RANDOM_SEED),\n","  GaussianNB(),\n","  BernoulliNB(),\n","  AdaBoostClassifier(random_state=RANDOM_SEED),\n","  KNeighborsClassifier(),\n","  ['LogisticRegression (liblinear)', LogisticRegression(random_state=RANDOM_SEED, max_iter=1000, solver='liblinear')],\n","  # ['LogisticRegression (newton-cg)', LogisticRegression(random_state=RANDOM_SEED, max_iter=1000, solver='newton-cg')],\n","  # LogisticRegressionCV(random_state=RANDOM_SEED, max_iter=1000, solver='liblinear'),\n","  SVC(random_state=RANDOM_SEED)\n","]"],"metadata":{"id":"n80p60wL-Op3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 모델 학습"],"metadata":{"id":"zcgyGnh-rIiD"}},{"cell_type":"code","source":["THREAD_NUM = 2\n","lock = threading.Lock()\n","work_queue = Queue()\n","scores = {}\n","\n","def work_proc():\n","  while not work_queue.empty():\n","    model, x_train, x_test, y_train, y_test, fold_counter = work_queue.get()\n","    if type(model) == list:\n","      model_name = model[0]\n","      model =  clone(model[1])\n","    else:\n","      model_name = type(model).__name__\n","      model = clone(model)\n","\n","    lock.acquire()\n","    print(f'learning... ({model_name} [{fold_counter}])')\n","    lock.release()\n","    \n","    start_time = time.time()\n","    model.fit(x_train, y_train)\n","    pred = model.predict(x_test)\n","    end_time = time.time()\n","    learning_time = end_time - start_time\n","    \n","    accuracy = accuracy_score(y_test, pred)\n","    precision = precision_score(y_test, pred, zero_division=0)\n","    recall = recall_score(y_test, pred, zero_division=0)\n","    roc_auc = roc_auc_score(y_test, pred)\n","    f1 = f1_score(y_test, pred, zero_division=0)\n","      \n","    lock.acquire()\n","    if model_name not in scores:\n","      scores[model_name] = {\n","        'model': [model],\n","        'learning_time': [learning_time],\n","        'accuracy': [accuracy],\n","        'precision': [precision],\n","        'recall': [recall],\n","        'roc_auc': [roc_auc],\n","        'f1': [f1]\n","      }\n","    else:\n","      scores[model_name]['model'].append(model)\n","      scores[model_name]['learning_time'].append(learning_time)\n","      scores[model_name]['accuracy'].append(accuracy)\n","      scores[model_name]['precision'].append(precision)\n","      scores[model_name]['recall'].append(recall)\n","      scores[model_name]['roc_auc'].append(roc_auc)\n","      scores[model_name]['f1'].append(f1)\n","    lock.release()\n","\n","def make_work_queue():\n","  for x_train, x_test, y_train, y_test, fold_counter in kfold_data:\n","    for model in models:\n","      work_queue.put([model, x_train, x_test, y_train, y_test, fold_counter])\n","\n","def start_learning():\n","  threads = []\n","\n","  make_work_queue()\n","\n","  print(\"start_learning\")\n","  for _ in range(THREAD_NUM):\n","    thread = threading.Thread(target=work_proc)\n","    thread.daemon = True\n","    threads.append(thread)\n","\n","  for t in threads:\n","      t.start()\n","\n","  for t in threads:\n","      t.join()\n","  print(\"end_learning\")\n","\n","start_learning()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9W14WRgw9_f1","outputId":"5ba010aa-ad3f-442d-a610-c0382a7ba8dc","executionInfo":{"status":"ok","timestamp":1654253188991,"user_tz":-540,"elapsed":127732,"user":{"displayName":"­김미래","userId":"05221646540924691050"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start_learning\n","learning... (XGBClassifier [1])\n","learning... (CatBoostClassifier [1])\n","learning... (LGBMClassifier [1])\n","learning... (RandomForestClassifier [1])\n","learning... (DecisionTreeClassifier [1])\n","learning... (GaussianNB [1])\n","learning... (BernoulliNB [1])\n","learning... (AdaBoostClassifier [1])\n","learning... (KNeighborsClassifier [1])\n","learning... (LogisticRegression (liblinear) [1])\n","learning... (SVC [1])\n","learning... (XGBClassifier [2])\n","learning... (CatBoostClassifier [2])\n","learning... (LGBMClassifier [2])\n","learning... (RandomForestClassifier [2])\n","learning... (DecisionTreeClassifier [2])\n","learning... (GaussianNB [2])\n","learning... (BernoulliNB [2])\n","learning... (AdaBoostClassifier [2])\n","learning... (KNeighborsClassifier [2])\n","learning... (LogisticRegression (liblinear) [2])\n","learning... (SVC [2])\n","learning... (XGBClassifier [3])\n","learning... (CatBoostClassifier [3])\n","learning... (LGBMClassifier [3])\n","learning... (RandomForestClassifier [3])\n","learning... (DecisionTreeClassifier [3])\n","learning... (GaussianNB [3])\n","learning... (BernoulliNB [3])\n","learning... (AdaBoostClassifier [3])\n","learning... (KNeighborsClassifier [3])\n","learning... (LogisticRegression (liblinear) [3])\n","learning... (SVC [3])\n","learning... (XGBClassifier [4])\n","learning... (CatBoostClassifier [4])\n","learning... (LGBMClassifier [4])\n","learning... (RandomForestClassifier [4])\n","learning... (DecisionTreeClassifier [4])\n","learning... (GaussianNB [4])\n","learning... (BernoulliNB [4])\n","learning... (AdaBoostClassifier [4])\n","learning... (KNeighborsClassifier [4])\n","learning... (LogisticRegression (liblinear) [4])\n","learning... (SVC [4])\n","learning... (XGBClassifier [5])\n","learning... (CatBoostClassifier [5])\n","learning... (LGBMClassifier [5])\n","learning... (RandomForestClassifier [5])\n","learning... (DecisionTreeClassifier [5])\n","learning... (GaussianNB [5])\n","learning... (BernoulliNB [5])\n","learning... (AdaBoostClassifier [5])\n","learning... (KNeighborsClassifier [5])\n","learning... (LogisticRegression (liblinear) [5])\n","learning... (SVC [5])\n","end_learning\n"]}]},{"cell_type":"markdown","source":["# 모델 점수 출력"],"metadata":{"id":"ygc6_TxVsYI7"}},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aRXnE4ApBlcR","executionInfo":{"status":"ok","timestamp":1654253204433,"user_tz":-540,"elapsed":277,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"d39f51d4-8b64-475d-87d4-33db9b8ca8ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.765\n","precision: 0.142\n","recall: 0.499\n","f1 score: 0.22\n","roc_auc score: 0.641\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.634\n","precision: 0.108\n","recall: 0.624\n","f1 score: 0.184\n","roc_auc score: 0.629\n","\n","========== BernoulliNB ==========\n","accuracy: 0.717\n","precision: 0.117\n","recall: 0.499\n","f1 score: 0.189\n","roc_auc score: 0.616\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.847\n","precision: 0.135\n","recall: 0.24\n","f1 score: 0.172\n","roc_auc score: 0.566\n","\n","========== GaussianNB ==========\n","accuracy: 0.86\n","precision: 0.141\n","recall: 0.221\n","f1 score: 0.172\n","roc_auc score: 0.564\n","\n","========== XGBClassifier ==========\n","accuracy: 0.876\n","precision: 0.156\n","recall: 0.192\n","f1 score: 0.172\n","roc_auc score: 0.558\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.926\n","precision: 0.412\n","recall: 0.077\n","f1 score: 0.126\n","roc_auc score: 0.532\n","\n","========== SVC ==========\n","accuracy: 0.885\n","precision: 0.113\n","recall: 0.106\n","f1 score: 0.108\n","roc_auc score: 0.523\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.842\n","precision: 0.095\n","recall: 0.153\n","f1 score: 0.117\n","roc_auc score: 0.522\n","\n","========== CatBoostClassifier ==========\n","accuracy: 0.909\n","precision: 0.139\n","recall: 0.058\n","f1 score: 0.081\n","roc_auc score: 0.514\n","\n","========== LGBMClassifier ==========\n","accuracy: 0.916\n","precision: 0.139\n","recall: 0.049\n","f1 score: 0.072\n","roc_auc score: 0.513\n","\n","========== learning_times ==========\n","CatBoostClassifier: 162.5s\n","LGBMClassifier: 55.9s\n","RandomForestClassifier: 11.6s\n","XGBClassifier: 7.6s\n","AdaBoostClassifier: 7.3s\n","SVC: 2.3s\n","DecisionTreeClassifier: 1.6s\n","LogisticRegression (liblinear): 0.5s\n","KNeighborsClassifier: 0.3s\n","BernoulliNB: 0.0s\n","GaussianNB: 0.0s\n","\n"]}]},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sf8yluwK_18t","executionInfo":{"status":"ok","timestamp":1653445067127,"user_tz":-540,"elapsed":324,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"f877162f-6a6e-4de4-c0c0-a0a10becabab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.765\n","precision: 0.142\n","recall: 0.499\n","f1 score: 0.22\n","roc_auc score: 0.641\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.634\n","precision: 0.108\n","recall: 0.624\n","f1 score: 0.184\n","roc_auc score: 0.629\n","\n","========== BernoulliNB ==========\n","accuracy: 0.717\n","precision: 0.117\n","recall: 0.499\n","f1 score: 0.189\n","roc_auc score: 0.616\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.847\n","precision: 0.135\n","recall: 0.24\n","f1 score: 0.172\n","roc_auc score: 0.566\n","\n","========== GaussianNB ==========\n","accuracy: 0.86\n","precision: 0.141\n","recall: 0.221\n","f1 score: 0.172\n","roc_auc score: 0.564\n","\n","========== XGBClassifier ==========\n","accuracy: 0.876\n","precision: 0.156\n","recall: 0.192\n","f1 score: 0.172\n","roc_auc score: 0.558\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.926\n","precision: 0.412\n","recall: 0.077\n","f1 score: 0.126\n","roc_auc score: 0.532\n","\n","========== SVC ==========\n","accuracy: 0.885\n","precision: 0.113\n","recall: 0.106\n","f1 score: 0.108\n","roc_auc score: 0.523\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.842\n","precision: 0.095\n","recall: 0.153\n","f1 score: 0.117\n","roc_auc score: 0.522\n","\n","========== CatBoostClassifier ==========\n","accuracy: 0.909\n","precision: 0.139\n","recall: 0.058\n","f1 score: 0.081\n","roc_auc score: 0.514\n","\n","========== LGBMClassifier ==========\n","accuracy: 0.916\n","precision: 0.139\n","recall: 0.049\n","f1 score: 0.072\n","roc_auc score: 0.513\n","\n","========== learning_times ==========\n","CatBoostClassifier: 176.8s\n","LGBMClassifier: 79.8s\n","RandomForestClassifier: 11.0s\n","XGBClassifier: 8.2s\n","AdaBoostClassifier: 7.4s\n","SVC: 2.4s\n","DecisionTreeClassifier: 1.6s\n","LogisticRegression (liblinear): 0.5s\n","KNeighborsClassifier: 0.4s\n","BernoulliNB: 0.1s\n","GaussianNB: 0.0s\n","\n"]}]},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Glzhv2P7GHcs","executionInfo":{"status":"ok","timestamp":1653385345452,"user_tz":-540,"elapsed":397,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"0b9f39e4-1a26-4b50-c917-67021eb9c6f9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.78\n","precision: 0.147\n","recall: 0.48\n","f1 score: 0.225\n","roc_auc score: 0.641\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.645\n","precision: 0.109\n","recall: 0.605\n","f1 score: 0.184\n","roc_auc score: 0.627\n","\n","========== BernoulliNB ==========\n","accuracy: 0.74\n","precision: 0.125\n","recall: 0.489\n","f1 score: 0.199\n","roc_auc score: 0.624\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.859\n","precision: 0.156\n","recall: 0.249\n","f1 score: 0.191\n","roc_auc score: 0.576\n","\n","========== XGBClassifier ==========\n","accuracy: 0.886\n","precision: 0.185\n","recall: 0.201\n","f1 score: 0.192\n","roc_auc score: 0.568\n","\n","========== GaussianNB ==========\n","accuracy: 0.865\n","precision: 0.146\n","recall: 0.193\n","f1 score: 0.162\n","roc_auc score: 0.553\n","\n","========== SVC ==========\n","accuracy: 0.893\n","precision: 0.157\n","recall: 0.125\n","f1 score: 0.136\n","roc_auc score: 0.536\n","\n","========== CatBoostClassifier ==========\n","accuracy: 0.909\n","precision: 0.184\n","recall: 0.106\n","f1 score: 0.134\n","roc_auc score: 0.536\n","\n","========== LGBMClassifier ==========\n","accuracy: 0.916\n","precision: 0.194\n","recall: 0.087\n","f1 score: 0.118\n","roc_auc score: 0.531\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.922\n","precision: 0.195\n","recall: 0.058\n","f1 score: 0.089\n","roc_auc score: 0.521\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.816\n","precision: 0.08\n","recall: 0.163\n","f1 score: 0.107\n","roc_auc score: 0.513\n","\n","========== learning_times ==========\n","CatBoostClassifier: 168.0s\n","LGBMClassifier: 39.0s\n","RandomForestClassifier: 11.9s\n","XGBClassifier: 9.6s\n","AdaBoostClassifier: 8.0s\n","SVC: 2.2s\n","DecisionTreeClassifier: 1.7s\n","LogisticRegression (liblinear): 0.6s\n","KNeighborsClassifier: 0.3s\n","BernoulliNB: 0.0s\n","GaussianNB: 0.0s\n","\n"]}]},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TGhiNZhICfIn","executionInfo":{"status":"ok","timestamp":1653312083597,"user_tz":-540,"elapsed":324,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"9d1e64e3-4b5a-45a2-9290-f9687d17872c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.78\n","precision: 0.147\n","recall: 0.48\n","f1 score: 0.225\n","roc_auc score: 0.641\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.646\n","precision: 0.11\n","recall: 0.615\n","f1 score: 0.187\n","roc_auc score: 0.631\n","\n","========== BernoulliNB ==========\n","accuracy: 0.74\n","precision: 0.125\n","recall: 0.489\n","f1 score: 0.199\n","roc_auc score: 0.624\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.855\n","precision: 0.148\n","recall: 0.25\n","f1 score: 0.185\n","roc_auc score: 0.574\n","\n","========== GaussianNB ==========\n","accuracy: 0.865\n","precision: 0.15\n","recall: 0.203\n","f1 score: 0.168\n","roc_auc score: 0.558\n","\n","========== XGBClassifier ==========\n","accuracy: 0.881\n","precision: 0.158\n","recall: 0.182\n","f1 score: 0.169\n","roc_auc score: 0.556\n","\n","========== SVC ==========\n","accuracy: 0.893\n","precision: 0.152\n","recall: 0.125\n","f1 score: 0.135\n","roc_auc score: 0.536\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.924\n","precision: 0.253\n","recall: 0.077\n","f1 score: 0.117\n","roc_auc score: 0.531\n","\n","========== CatBoostClassifier ==========\n","accuracy: 0.911\n","precision: 0.176\n","recall: 0.087\n","f1 score: 0.116\n","roc_auc score: 0.528\n","\n","========== LGBMClassifier ==========\n","accuracy: 0.916\n","precision: 0.182\n","recall: 0.078\n","f1 score: 0.107\n","roc_auc score: 0.527\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.815\n","precision: 0.088\n","recall: 0.183\n","f1 score: 0.119\n","roc_auc score: 0.522\n","\n","========== learning_times ==========\n","CatBoostClassifier: 167.3s\n","LGBMClassifier: 26.1s\n","RandomForestClassifier: 12.3s\n","XGBClassifier: 8.5s\n","AdaBoostClassifier: 8.1s\n","SVC: 2.1s\n","DecisionTreeClassifier: 1.9s\n","LogisticRegression (liblinear): 0.7s\n","KNeighborsClassifier: 0.3s\n","BernoulliNB: 0.1s\n","GaussianNB: 0.0s\n","\n"]}]},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVqS4kqh3tjR","executionInfo":{"status":"ok","timestamp":1653308584003,"user_tz":-540,"elapsed":370,"user":{"displayName":"­김미래","userId":"05221646540924691050"}},"outputId":"b06bdbff-439e-4ec8-c4d8-3b51685b69aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.78\n","precision: 0.147\n","recall: 0.48\n","f1 score: 0.225\n","roc_auc score: 0.641\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.645\n","precision: 0.109\n","recall: 0.605\n","f1 score: 0.184\n","roc_auc score: 0.627\n","\n","========== BernoulliNB ==========\n","accuracy: 0.74\n","precision: 0.125\n","recall: 0.489\n","f1 score: 0.199\n","roc_auc score: 0.624\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.859\n","precision: 0.156\n","recall: 0.249\n","f1 score: 0.191\n","roc_auc score: 0.576\n","\n","========== XGBClassifier ==========\n","accuracy: 0.886\n","precision: 0.185\n","recall: 0.201\n","f1 score: 0.192\n","roc_auc score: 0.568\n","\n","========== GaussianNB ==========\n","accuracy: 0.865\n","precision: 0.146\n","recall: 0.193\n","f1 score: 0.162\n","roc_auc score: 0.553\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.925\n","precision: 0.324\n","recall: 0.107\n","f1 score: 0.155\n","roc_auc score: 0.545\n","\n","========== SVC ==========\n","accuracy: 0.893\n","precision: 0.157\n","recall: 0.125\n","f1 score: 0.136\n","roc_auc score: 0.536\n","\n","========== CatBoostClassifier ==========\n","accuracy: 0.909\n","precision: 0.184\n","recall: 0.106\n","f1 score: 0.134\n","roc_auc score: 0.536\n","\n","========== LGBMClassifier ==========\n","accuracy: 0.916\n","precision: 0.194\n","recall: 0.087\n","f1 score: 0.118\n","roc_auc score: 0.531\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.825\n","precision: 0.077\n","recall: 0.144\n","f1 score: 0.1\n","roc_auc score: 0.508\n","\n","========== learning_times ==========\n","CatBoostClassifier: 170.8s\n","LGBMClassifier: 30.9s\n","XGBClassifier: 13.6s\n","AdaBoostClassifier: 9.3s\n","RandomForestClassifier: 9.2s\n","SVC: 2.9s\n","DecisionTreeClassifier: 2.3s\n","LogisticRegression (liblinear): 0.6s\n","KNeighborsClassifier: 0.4s\n","BernoulliNB: 0.1s\n","GaussianNB: 0.1s\n","\n"]}]},{"cell_type":"code","source":["# 점수 출력\n","model_score_ranking = sorted(scores.keys(), key=lambda x: np.mean(scores[x]['roc_auc']), reverse=True)\n","for model_name in model_score_ranking:\n","  score_values = scores[model_name]\n","  print(f'========== {model_name} ==========')\n","  print(\"accuracy:\", round(np.mean(score_values['accuracy']), 3))\n","  print(\"precision:\", round(np.mean(score_values['precision']), 3))\n","  print(\"recall:\", round(np.mean(score_values['recall']), 3))\n","  print(\"f1 score:\", round(np.mean(score_values['f1']), 3))\n","  print(\"roc_auc score:\", round(np.mean(score_values['roc_auc']), 3))\n","  print()\n","\n","# 모델 학습시간 출력\n","model_time_ranking = sorted(scores.keys(), key=lambda x: np.sum(scores[x]['learning_time']), reverse=True)\n","print('========== learning_times ==========')\n","for model_name in model_time_ranking:\n","  learning_time = np.sum(scores[model_name]['learning_time'])\n","  print(f\"{model_name}: {round(learning_time, 1)}s\")\n","print()"],"metadata":{"id":"k73ELBNLD5VU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653228203759,"user_tz":-540,"elapsed":317,"user":{"displayName":"PerfectZERO","userId":"05414566628849749027"}},"outputId":"907a1ddc-82d8-40ca-a16d-da23e97464d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["========== LogisticRegression (liblinear) ==========\n","accuracy: 0.838\n","precision: 0.185\n","recall: 0.422\n","f1 score: 0.257\n","roc_auc score: 0.645\n","\n","========== GaussianNB ==========\n","accuracy: 0.62\n","precision: 0.123\n","recall: 0.568\n","f1 score: 0.189\n","roc_auc score: 0.596\n","\n","========== BernoulliNB ==========\n","accuracy: 0.757\n","precision: 0.103\n","recall: 0.346\n","f1 score: 0.158\n","roc_auc score: 0.566\n","\n","========== AdaBoostClassifier ==========\n","accuracy: 0.86\n","precision: 0.127\n","recall: 0.192\n","f1 score: 0.151\n","roc_auc score: 0.55\n","\n","========== SVC ==========\n","accuracy: 0.607\n","precision: 0.083\n","recall: 0.481\n","f1 score: 0.141\n","roc_auc score: 0.549\n","\n","========== DecisionTreeClassifier ==========\n","accuracy: 0.832\n","precision: 0.113\n","recall: 0.221\n","f1 score: 0.149\n","roc_auc score: 0.549\n","\n","========== XGBClassifier ==========\n","accuracy: 0.91\n","precision: 0.181\n","recall: 0.106\n","f1 score: 0.133\n","roc_auc score: 0.537\n","\n","========== RandomForestClassifier ==========\n","accuracy: 0.931\n","precision: 0.35\n","recall: 0.029\n","f1 score: 0.052\n","roc_auc score: 0.512\n","\n","========== KNeighborsClassifier ==========\n","accuracy: 0.579\n","precision: 0.065\n","recall: 0.395\n","f1 score: 0.112\n","roc_auc score: 0.494\n","\n","========== learning_times ==========\n","LogisticRegression (liblinear): 252.7s\n","XGBClassifier: 35.7s\n","AdaBoostClassifier: 30.2s\n","RandomForestClassifier: 25.5s\n","SVC: 7.6s\n","DecisionTreeClassifier: 6.8s\n","KNeighborsClassifier: 0.5s\n","BernoulliNB: 0.2s\n","GaussianNB: 0.1s\n","\n"]}]},{"cell_type":"markdown","source":["# 분석 및 기타"],"metadata":{"id":"e5y8pw1Eshtr"}},{"cell_type":"code","source":["df = pd.DataFrame(x.isnull().sum().sort_values())\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"bsgzYeiD4Wdp","executionInfo":{"status":"ok","timestamp":1653226380173,"user_tz":-540,"elapsed":307,"user":{"displayName":"PerfectZERO","userId":"05414566628849749027"}},"outputId":"897cbd6f-3946-496f-ffdb-88d99831ea28"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        0\n","291     0\n","248     0\n","249     0\n","250     0\n","251     0\n","..    ...\n","220  1341\n","293  1429\n","292  1429\n","157  1429\n","158  1429\n","\n","[590 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-05382abf-1fbb-401c-86d7-03aaeaeb9e85\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>291</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>1341</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>1429</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>1429</td>\n","    </tr>\n","    <tr>\n","      <th>157</th>\n","      <td>1429</td>\n","    </tr>\n","    <tr>\n","      <th>158</th>\n","      <td>1429</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>590 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05382abf-1fbb-401c-86d7-03aaeaeb9e85')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-05382abf-1fbb-401c-86d7-03aaeaeb9e85 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-05382abf-1fbb-401c-86d7-03aaeaeb9e85');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["defective = (y == 1).astype(int)\n","nulls = x.isnull().sum(axis=1)\n","\n","ax = sns.jointplot(x=\"defective\", y=\"nulls\", data=pd.concat([defective, nulls], axis=1, keys=[\"defective\", \"nulls\"]))\n","ax.fig.suptitle('nulls-defective', fontsize=16)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"UPRzBiO-_pga","executionInfo":{"status":"ok","timestamp":1653227085035,"user_tz":-540,"elapsed":1794,"user":{"displayName":"PerfectZERO","userId":"05414566628849749027"}},"outputId":"25ad71f6-3a84-484e-b804-04a622504095"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0.98, 'nulls-defective')"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x432 with 3 Axes>"],"image/png":"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zcMPP8wFF1xAcXFxn9pOO+00brzxxqTLSMdRnsihKKwksI488kgAGhsbOeqoowDo7OzkySefHNRyR4wY0RtSd999NxDb4Sbb6Z500kl0dXXx85//vM+pv0cffbTP+04++WRKS0t5/fXXe68fHY65c+fy/e9/n5qaGkaPHt3v+84880wef/xxmpqaqK6uTvqeoqKi3gEdh2JmXHrppfzgBz/gE5/4BFu3bu1zCrCntrVr1zJt2rQ+ISaSSQorCazjjz+eD33oQ3z1q1+lu7uboqIi7rrrLvbt23fYy1q0aBGlpaWcdNJJjB49mtdee613IMHB/O3f/i2nnnoqV111Fe+++y6TJk1i+fLlNDY29nlfWVkZ3/nOd7jmmmtoaWnh7LPPpry8nK1bt/LMM88wZ86c3tF1yXzlK19h+fLlnHbaaXzlK19h8uTJvP/++7zyyiv8/ve/Z+XKlQDceuutPPHEE5x88sl8/etf58Mf/jBbt25l9erV/PSnPwVigyzuuusuli9fzoc+9CFKS0t7j8ySWbhwId/85je5+uqrqamp6R3q3mPp0qXMmjWLj370o3zxi1+ktraW9957j8bGRt54440+A0pEvKKwksDKz89n5cqVXHPNNXz2s59l5MiRfPnLX+aEE07g1ltvPaxlnXLKKfzkJz/hwQcfpLW1lbFjx3LppZemtJzHH3+c6667jptuuokhQ4Ywb948fvCDH/S5rgNw1VVXMX78eL7zne/w8MMP09nZybhx4zjttNM49thjD7qO8vJy/vjHP7J06VJuv/12tm7dyvDhw5k8eXKfwR21tbU8++yz3Hzzzdx0003s3r2bcePGMX/+/N733Hjjjbz66qt8/vOfZ/fu3cyePbv3mlQyRx99NPX19axbt46bbrrpgB62mpoa1q1bxy233MLXv/51WlpaqKiooK6ubkBHkSIDYVk+rf2Aijczz4euZ/nvVUT8c/gd7yGg0YAiIhJ4CisREQk8hZWIiASewkpERAJPYSUiIoGnsBIRkcBTWImISOAprEREJPAUViIiEngKKxERCTyFlYiIBJ7CSkREAk9hJSIigaewEhGRwFNYiYhI4CmsREQk8BRWIiISeAorEREJPIWViIgEnsJKREQCT2ElIiKBp7ASEZHAU1iJiEjgKaxERCTwFFYiIhJ4CisREQk8hZWIiASewkpERAJP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\n"},"metadata":{"needs_background":"light"}}]}]}